@page "/Admin"
@model MyApp.Namespace.AdminModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "_Layout";
    ViewData["Title"] = "Admin Panel";
}

<h1>Admin Panel</h1>

<!-- Section for products awaiting approval -->
<section>
    <h2>1. Afventer Godkendelse</h2>
    <ul id="pendingList"></ul>
</section>

<!-- Section for currently active (approved) auctions -->
<section>
    <h2>2. Aktive Auktioner</h2>
    <ul id="activeList"></ul>
</section>

<!-- Modal window for editing a product -->
<div id="editModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            Rediger Auktion
            <span class="modal-close" onclick="closeEditModal()">&times;</span>
        </div>
        <form id="editForm">
            <input name="Id" type="hidden" />
            <label>Titel: <input name="Name" /></label><br />
            <label>Beskrivelse: <input name="Description" /></label><br />
            <label>Minimumspris: <input name="StartPrice" type="number" step="0.01" /></label><br />
            <label>Deadline: <input name="EndOfAuction" type="datetime-local" /></label><br />
            <button type="submit">Gem</button>
            <button type="button" onclick="closeEditModal()">Annuller</button>
        </form>
    </div>
</div>

@section Scripts {
<script>
    // Token passed from server for authorization
    const jwtToken = '@Model.JwtToken';

    // Loads all products from the API and displays them in respective lists
    const loadProducts = async () => {
        const res = await fetch('/Auction/GetAllProducts', {
            headers: {
                'Authorization': `Bearer ${jwtToken}`
            }
        });
        const products = await res.json();

        const now = new Date();
        const pendingList = document.getElementById('pendingList');
        const activeList = document.getElementById('activeList');
        pendingList.innerHTML = '';
        activeList.innerHTML = '';

     // Loop through each product and categorize it
        products.forEach(p => {
            const li = document.createElement('li');
            li.textContent = `${p.name} - ${p.startPrice} kr`;

            const isApproved = p.isApproved === true;
            const hasBids = p.bidHistory && p.bidHistory.length > 0;
            const notEnded = new Date(p.endOfAuction) > now;
    // Product is pending approval
            if (!isApproved) {
                const approveBtn = document.createElement('button');
                approveBtn.textContent = "Godkend";
                approveBtn.onclick = () => confirmApproval(p);

                const editBtn = document.createElement('button');
                editBtn.textContent = "Rediger";
                editBtn.onclick = () => openEditModal(p);

                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = "Slet";
                deleteBtn.style.backgroundColor = "#e74c3c";
                deleteBtn.style.color = "white";
                deleteBtn.onclick = () => confirmDelete(p.id);

                li.appendChild(approveBtn);
                li.appendChild(editBtn);
                li.appendChild(deleteBtn);
                pendingList.appendChild(li);
            }
   // Product is active and approved
            if (notEnded && isApproved) {
                const detailBtn = document.createElement('button');
                detailBtn.textContent = "Vis bud";
                detailBtn.onclick = () => alert(JSON.stringify(p.bidHistory || [], null, 2));

                const timeLeft = Math.round((new Date(p.endOfAuction) - now) / 60000);
                li.append(` - Slutter om ${timeLeft} min`);
                li.appendChild(detailBtn);
                activeList.appendChild(li);
            }
        });
    };
    // Confirms and sends approval update for a product
    const confirmApproval = async (product) => {
        if (confirm("Er du sikker på du vil godkende dette produkt?")) {
            product.isApproved = true;
            await fetch(`/Auction/UpdateProduct/${product.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${jwtToken}`
                },
                body: JSON.stringify(product)
            });
            loadProducts();
        }
    };
    // Confirms and sends delete request for a product
    const confirmDelete = async (productId) => {
        if (confirm("Er du sikker på du vil slette dette produkt?")) {
            await fetch(`/Auction/DeleteProduct/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${jwtToken}`
                }
            });
            loadProducts();
        }
    };
// Opens modal form with product data for editing
    const openEditModal = (product) => {
        const form = document.getElementById('editForm');
        form.Id.value = product.id;
        form.Name.value = product.name;
        form.Description.value = product.description || '';
        form.StartPrice.value = product.startPrice;
        form.EndOfAuction.value = new Date(product.endOfAuction).toISOString().slice(0, 16);
        document.getElementById('editModal').style.display = 'block';
    };
// Closes the edit modal
    const closeEditModal = () => {
        document.getElementById('editModal').style.display = 'none';
    };
 // Handles submission of the edit form and updates the product
    document.getElementById('editForm').onsubmit = async (e) => {
        e.preventDefault();

        const form = e.target;
        const id = form.Id.value;

 // Get existing product data
        const res = await fetch(`/Auction/GetProductById/${id}`, {
            headers: { 'Authorization': `Bearer ${jwtToken}` }
        });
        const product = await res.json();

   // Update fields from form
        product.name = form.Name.value;
        product.description = form.Description.value;
        product.startPrice = parseFloat(form.StartPrice.value);
        product.endOfAuction = new Date(form.EndOfAuction.value).toISOString();

// Send update request
        await fetch(`/Auction/UpdateProduct/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${jwtToken}`
            },
            body: JSON.stringify(product)
        });

        closeEditModal();
        loadProducts();
    };
// Close modal if user clicks outside the modal window
    window.onclick = function (event) {
        const editModal = document.getElementById('editModal');
        if (event.target === editModal) closeEditModal();
    };

  // Initial data load when page loads
    loadProducts();
</script>
}
